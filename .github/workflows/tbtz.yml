name: Smart Sync from cluntop/tvbox

on:
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点（北京时间8点）自动同步
  workflow_dispatch:      # 允许手动触发

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SYNC_TOKEN }}
          repository: 13ztop/tvbox
          path: my-repo
          ref: main
          fetch-depth: 0  # 获取完整历史记录
          
      - name: Create backup directory
        run: mkdir -p /tmp/repo-backup
          
      - name: Identify custom files
        id: find_custom
        run: |
          # 克隆源仓库用于比较
          git clone --depth 1 https://github.com/cluntop/tvbox.git source-repo
          
          # 查找目标仓库独有的文件（排除.git目录）
          cd my-repo
          find . -type f -not -path './.git/*' | while read file; do
            if [ ! -f "../source-repo/$file" ]; then
              # 排除Git内部文件和工作流目录
              if [[ "$file" != *".github/workflows/"* ]]; then
                echo "Custom file detected: $file"
                echo "$file" >> /tmp/repo-backup/custom-files.txt
              fi
            fi
          done
          
          # 保存自定义文件数量
          if [ -f /tmp/repo-backup/custom-files.txt ]; then
            custom_count=$(wc -l < /tmp/repo-backup/custom-files.txt)
            echo "custom_files_count=$custom_count" >> $GITHUB_OUTPUT
          else
            echo "custom_files_count=0" >> $GITHUB_OUTPUT
          fi
          
          echo "Custom files identification complete"
          
      - name: Get source repository version
        id: source_version
        run: |
          cd source-repo
          echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "full_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "commit_date=$(git log -1 --format=%cd --date=format:'%Y-%m-%d')" >> $GITHUB_OUTPUT
          
      - name: Get target repository commit
        id: target_version
        run: |
          cd my-repo
          echo "TARGET_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          
      - name: Backup protected content
        run: |
          # 备份需要保护的核心文件
          cp my-repo/README.md /tmp/repo-backup/ 2>/dev/null || true
          cp my-repo/DISCLAIMER.md /tmp/repo-backup/ 2>/dev/null || true
          
          # 备份整个配置和工作流目录
          mkdir -p /tmp/repo-backup/.github
          cp -R my-repo/.github/* /tmp/repo-backup/.github/ 2>/dev/null || true
          
          # 备份自定义文件（基于上一步的检测）
          if [ -f /tmp/repo-backup/custom-files.txt ]; then
            mkdir -p /tmp/repo-backup/custom-files
            while read file; do
              mkdir -p "/tmp/repo-backup/custom-files/$(dirname "$file")"
              cp "my-repo/$file" "/tmp/repo-backup/custom-files/$file"
            done < /tmp/repo-backup/custom-files.txt
          fi
          
          echo "Protected content backed up"
          
      - name: Full sync from source
        run: |
          # 使用rsync覆盖所有源仓库存在的文件
          rsync -av --delete \
            --exclude=.git \
            --exclude=README.md \
            --exclude=DISCLAIMER.md \
            --exclude=.github \
            source-repo/ my-repo/
          
          echo "Source files synced, protected files excluded"
            
      - name: Restore protected content
        run: |
          # 恢复核心文件
          cp /tmp/repo-backup/README.md my-repo/ 2>/dev/null || true
          cp /tmp/repo-backup/DISCLAIMER.md my-repo/ 2>/dev/null || true
          
          # 恢复工作流配置
          mkdir -p my-repo/.github
          cp -R /tmp/repo-backup/.github/* my-repo/.github/ 2>/dev/null || true
          
          # 恢复自定义文件
          if [ -d /tmp/repo-backup/custom-files ]; then
            cd /tmp/repo-backup/custom-files
            find . -type f | while read file; do
              mkdir -p "$GITHUB_WORKSPACE/my-repo/$(dirname "$file")"
              cp "$file" "$GITHUB_WORKSPACE/my-repo/$file"
            done
          fi
          
          echo "Protected content restored"
          
      - name: Commit and push changes
        id: commit_push
        run: |
          cd my-repo
          git config user.name "GitHub Actions Sync"
          git config user.email "actions@github.com"
          git add -A
          
          # 检查变更
          if git diff-index --quiet HEAD --; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "no_changes_detected=true" >> $GITHUB_OUTPUT
            echo "没有需要提交的变更"
          else
            # 计算变更文件数量
            changes_count=$(git diff --name-only HEAD | wc -l)
            echo "changes_count=$changes_count" >> $GITHUB_OUTPUT
            
            # 生成提交信息
            commit_msg="智能同步: 更新 $changes_count 个文件"
            if [ -f /tmp/repo-backup/custom-files.txt ]; then
              custom_count=$(wc -l < /tmp/repo-backup/custom-files.txt)
              commit_msg+=", 保留 $custom_count 个自定义文件"
            fi
            
            git commit -m "$commit_msg"
            git push origin main
            echo "commit_msg=$commit_msg" >> $GITHUB_OUTPUT
            echo "变更已成功推送"
          fi
          
      - name: Cleanup
        run: |
          rm -rf source-repo
          rm -rf /tmp/repo-backup
          
      # ======================
      # 整合通知系统
      # ======================
      # 设置当前时间（用于所有通知）
      - name: Set current time
        id: set_time
        run: |
          echo "CURRENT_TIME=$(date -u +'%Y-%m-%d %H:%M UTC')" >> $GITHUB_ENV
          echo "CURRENT_TIME_SHORT=$(date -u +'%H:%M UTC')" >> $GITHUB_ENV
          
      - name: Notify Telegram on Sync Success
        if: success() && steps.commit_push.outputs.commit_msg
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🔄 *智能同步报告 | ${{ steps.source_version.outputs.commit_date }} (${{ env.CURRENT_TIME_SHORT }})*
            ━━━━━━━━━━━━━━━━━━━━━━━━
            📦 **源仓库**: [cluntop/tvbox@${{ steps.source_version.outputs.commit_hash }}](https://github.com/cluntop/tvbox/commit/${{ steps.source_version.outputs.full_hash }})
            🏠 **目标仓库**: [${{ github.repository }}@${{ env.TARGET_COMMIT }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            ━━━━━━━━━━━━━━━━━━━━━━━━
            • **变更**: ${{ steps.commit_push.outputs.changes_count }} 个文件更新
            • **保留**: ${{ steps.find_custom.outputs.custom_files_count }} 个自定义文件
            • **提交**: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            ━━━━━━━━━━━━━━━━━━━━━━━━
            ✅ 同步成功! 所有更新已应用
            [查看工作流运行](#${{ github.run_number }})
          parse_mode: markdown
          
      - name: Notify Telegram on No Changes
        if: success() && steps.commit_push.outputs.no_changes_detected
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ℹ️ *智能同步报告 | ${{ steps.source_version.outputs.commit_date }} (${{ env.CURRENT_TIME_SHORT }})*
            ━━━━━━━━━━━━━━━━━━━━━━━━
            📦 **源仓库**: [cluntop/tvbox@${{ steps.source_version.outputs.commit_hash }}](https://github.com/cluntop/tvbox/commit/${{ steps.source_version.outputs.full_hash }})
            🏠 **目标仓库**: [${{ github.repository }}@${{ env.TARGET_COMMIT }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
            ━━━━━━━━━━━━━━━━━━━━━━━━
            • **保留文件**: ${{ steps.find_custom.outputs.custom_files_count }} 个
            • **同步状态**: 内容一致，无需更新
            • **检测时间**: ${{ env.CURRENT_TIME }}
            ━━━━━━━━━━━━━━━━━━━━━━━━
            ✅ 仓库已是最新状态
            [查看我的仓库更改记录](https://github.com/${{ github.repository }}/commits/main)
          parse_mode: markdown
          
      - name: Notify Telegram on Failure
        if: failure()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ‼️ *智能同步报告 | 同步失败 (${{ env.CURRENT_TIME_SHORT }})*
            ━━━━━━━━━━━━━━━━━━━━━━━━
            📦 **源仓库**: [cluntop/tvbox](https://github.com/cluntop/tvbox)
            🏠 **目标仓库**: [${{ github.repository }}](https://github.com/${{ github.repository }})
            ━━━━━━━━━━━━━━━━━━━━━━━━
            • **失败阶段**: ${{ job.status }}
            • **工作流**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            • **发生时间**: ${{ env.CURRENT_TIME }}
            ━━━━━━━━━━━━━━━━━━━━━━━━
            🚨 需要立即处理!
            [查看错误日志](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          parse_mode: markdown
